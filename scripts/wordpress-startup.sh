#!/bin/bash
set -e

# WordPress Startup Script with Cache Management
echo "üöÄ Starting WordPress with cache management..."

# Function to safely remove problematic cache files
remove_problematic_cache_files() {
    local wp_content="/var/www/html/wp-content"
    
    if [ -d "$wp_content" ]; then
        echo "üßπ Checking for problematic cache files..."
        
        # Check if object-cache.php exists and might be problematic
        if [ -f "$wp_content/object-cache.php" ]; then
            echo "üìÅ Found object-cache.php, checking compatibility..."
            
            # Check if it references Memcache/Memcached without proper checks
            if grep -q "class.*Memcache\|new.*Memcache" "$wp_content/object-cache.php"; then
                if ! php -m | grep -q memcached; then
                    echo "‚ö†Ô∏è  Memcached not available, backing up and removing object-cache.php"
                    mv "$wp_content/object-cache.php" "$wp_content/object-cache.php.backup.$(date +%s)"
                    echo "‚úÖ object-cache.php backed up and removed"
                fi
            fi
        fi
        
        # Check for advanced-cache.php
        if [ -f "$wp_content/advanced-cache.php" ]; then
            if [ ! -s "$wp_content/advanced-cache.php" ]; then
                echo "üóëÔ∏è  Removing empty advanced-cache.php"
                rm -f "$wp_content/advanced-cache.php"
            fi
        fi
        
        # Clean cache directories if they exist
        for cache_dir in cache wp-rocket-cache w3tc-cache; do
            if [ -d "$wp_content/$cache_dir" ]; then
                echo "üßπ Cleaning $cache_dir directory..."
                find "$wp_content/$cache_dir" -type f -name "*.php" -delete 2>/dev/null || true
                find "$wp_content/$cache_dir" -type f -name "*.cache" -delete 2>/dev/null || true
            fi
        done
        
        echo "‚úÖ Cache cleanup completed"
    fi
}

# Function to create a simple object cache if needed
create_development_object_cache() {
    local wp_content="/var/www/html/wp-content"
    local memcached_available=false
    
    # Check if Memcached is available
    if php -m | grep -q memcached; then
        memcached_available=true
        echo "‚úÖ Memcached extension is available"
    else
        echo "‚ÑπÔ∏è  Memcached extension not available, using file-based caching"
    fi
    
    # Only create object-cache.php if it doesn't exist and we have a WordPress installation
    if [ ! -f "$wp_content/object-cache.php" ] && [ -f "/var/www/html/wp-config.php" ]; then
        if [ "$memcached_available" = true ]; then
            echo "üìù Creating Memcached-compatible object-cache.php..."
            cat > "$wp_content/object-cache.php" << 'EOF'
<?php
/**
 * Development Object Cache with Memcached support
 * Auto-generated by WordPress Docker Stage
 */

// Check if Memcached is available
if (class_exists('Memcached')) {
    // Use WordPress's built-in object caching with Memcached
    if (!defined('WP_CACHE_KEY_SALT')) {
        define('WP_CACHE_KEY_SALT', 'wordpress_docker_stage_');
    }
    
    // Simple Memcached object cache implementation
    class WP_Object_Cache {
        private $memcached;
        private $cache = array();
        
        public function __construct() {
            $this->memcached = new Memcached();
            $this->memcached->addServer('memcached', 11211);
        }
        
        public function get($key, $group = 'default') {
            $cache_key = WP_CACHE_KEY_SALT . $group . ':' . $key;
            $value = $this->memcached->get($cache_key);
            return $value !== false ? $value : false;
        }
        
        public function set($key, $data, $group = 'default', $expire = 0) {
            $cache_key = WP_CACHE_KEY_SALT . $group . ':' . $key;
            return $this->memcached->set($cache_key, $data, $expire);
        }
        
        public function delete($key, $group = 'default') {
            $cache_key = WP_CACHE_KEY_SALT . $group . ':' . $key;
            return $this->memcached->delete($cache_key);
        }
        
        public function flush() {
            return $this->memcached->flush();
        }
    }
    
    $wp_object_cache = new WP_Object_Cache();
    
} else {
    // Fallback to WordPress default object caching (file-based)
    if (!function_exists('wp_cache_get')) {
        function wp_cache_get($key, $group = '') { return false; }
        function wp_cache_set($key, $data, $group = '', $expire = 0) { return true; }
        function wp_cache_delete($key, $group = '') { return true; }
        function wp_cache_flush() { return true; }
    }
}
EOF
            echo "‚úÖ Created Memcached-compatible object-cache.php"
        fi
    fi
}

# Function to update wp-config.php for cache settings
update_wp_config_cache_settings() {
    local wp_config="/var/www/html/wp-config.php"
    
    if [ -f "$wp_config" ]; then
        echo "‚öôÔ∏è  Updating wp-config.php cache settings..."
        
        # Disable problematic cache settings
        sed -i "s/define( *'WP_CACHE', *true *);/define('WP_CACHE', false);/g" "$wp_config"
        
        # Add cache-related constants if not present
        if ! grep -q "WP_CACHE_KEY_SALT" "$wp_config"; then
            # Add before the "stop editing" comment
            sed -i "/stop editing/i\\
\\
/* Cache Configuration for Development */\\
if (!defined('WP_CACHE_KEY_SALT')) {\\
    define('WP_CACHE_KEY_SALT', 'wp_docker_' . DB_NAME . '_');\\
}\\
" "$wp_config"
        fi
        
        echo "‚úÖ Updated wp-config.php cache settings"
    fi
}

# Wait for database if specified
if [ -n "$WORDPRESS_DB_HOST" ]; then
    echo "‚è≥ Waiting for database connection..."
    while ! mysqladmin ping -h"${WORDPRESS_DB_HOST%%:*}" -P"${WORDPRESS_DB_HOST##*:}" --silent; do
        sleep 1
    done
    echo "‚úÖ Database is ready"
fi

# Run cache management functions
remove_problematic_cache_files
create_development_object_cache
update_wp_config_cache_settings

# Set proper permissions
if [ -d "/var/www/html/wp-content" ]; then
    chown -R www-data:www-data /var/www/html/wp-content
    chmod -R 755 /var/www/html/wp-content
fi

echo "üéâ WordPress startup completed successfully"

# Execute the original entrypoint
exec docker-entrypoint.sh "$@"